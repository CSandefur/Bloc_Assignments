Exercises

> In your own words, explain what clean code is and why it is important.

Clean code is good code. It's easy to read (by future you and other developers), and easy to understand quickly. It doesn't have a lot of unnecessary bloat and logic. It's simplified as much as it can be. Functions are reusable. It's designed for the task at hand, and not future possibilities. 

Clean code is important because it's so much easier to work with, easier to maintain and debug (and avoid causing bugs), and saves a lot of time. 

> Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Avionics software is a big one. If the code were to fail, there could be large and tragic accidents. 

> 3 - Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

No, because it isn't to tell at a glance what the function or variables do (because of naming). It also seems to have two responsibilities to me: one to convert to celsius and one to convert to fahrenheit. It should probably make a call to two separate functions. 

FUNCTION convertTemperatureUnits(temperature, unitOfMeasurement)

  IF unitOfMeasurement = "F" THEN
    CALL FUNCTION convertToCelsius(temperature)

  ELSE IF unitOfMeasurent = "C" THEN
    CALL FUNCTION convertToFahrenheit(temperature)
 
  END IF
END FUNCTION

FUNCTION convertToCelsius(temperature)
  RETURN (temperature-32) * (5/9)
END FUNCTION

FUNCTION convertToFahrenheit(temperature)
  RETURN temperature * 1.8000 + 32.00
END FUNCTION



> 4 Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

This looks like clean code to me. It might be better not to shorten calculate to calc, but otherwise the naming looks good, it's easy to read and follow, and it only does one thing. 

> 5a 

This function seems to be doing too many things, so I split it into more independent methods. 

FUNCTION findDiscountedTotal(subTotal, discountRate) 
  RETURN total (subTotal * discountRate) + (subTotal * tax)
END FUNCTION

FUNCTION checkOutCustomer (subTotal, discountRate, callback, paymentType)
  CALLBACK(subTotal, discountRate)
  PRINT "Your total due is: " + total
  IF paymentType = "CASH"
    CALL getCashPayment(total)
  ELSE CALL getCardPayment
END FUNCTION

FUNCTION getCashPayment(amount, total)
  PRINT "Change due: " + amount - total
END FUNCTION

FUNCTION getCardPayment(total)
  PRINT "Your credit card has been charged: " + total
END FUNCTION
  

> 5b 

FUNCTION checkoutBook(book, guest)
  IF guest.accountActive && guest.outstandingFees = 0 && NOT guest.hasOverdueBooks
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
  END IF
END FUNCTION


> 5c 

I'm splitting these into two different classes (one for each responsibility - offers and actions). 


CLASS AccountActions

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION


 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION


 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END

CLASS AccountOffers 

 FUNCTION offerCreditCard
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END


> 6 Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.


function findPerfectSquares(numberList){
  var sum = numberList.reduce((total, amount) => total + amount);
  if (Math.sqrt(sum) % 1 === 0) {
    return Math.sqrt(sum);
  }
  else {
    return sum;
  }
}


> 7 Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function isDuplicate(numberList){
  for (let i = 0; i < numberList.length; i++){
    for (let j = i + 1; j < numberList.length; j++){
      if (numberList[i] === numberList[j]) {
        return true;
      }
    }
  }
  return false;
}
 

